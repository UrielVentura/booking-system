version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: booking-db
    environment:
      POSTGRES_USER: ${DB_USER:-bookinguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-bookingpass}
      POSTGRES_DB: ${DB_NAME:-bookingdb}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - booking-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-bookinguser}']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: booking-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-bookinguser}:${DB_PASSWORD:-bookingpass}@postgres:5432/${DB_NAME:-bookingdb}?schema=public
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
    ports:
      - '3001:3001'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - booking-network
    command: npm run start:dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: booking-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      NEXT_PUBLIC_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      NEXT_PUBLIC_AUTH0_REDIRECT_URI: ${AUTH0_REDIRECT_URI:-http://localhost:3000}
      NEXT_PUBLIC_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
    ports:
      - '3000:3000'
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - booking-network
    command: npm run dev

networks:
  booking-network:
    driver: bridge

volumes:
  postgres_data:
